package dp;

//给你一个非负整数数组 nums ，你最初位于数组的第一个位置。
//
// 数组中的每个元素代表你在该位置可以跳跃的最大长度。
//
// 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
//
// 假设你总是可以到达数组的最后一个位置。
//
//
//
// 示例 1:
//
//
//输入: nums = [2,3,1,1,4]
//输出: 2
//解释: 跳到最后一个位置的最小跳跃数是 2。
//     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
//
//
// 示例 2:
//
//
//输入: nums = [2,3,0,1,4]
//输出: 2
//
//
//
//
// 提示:
//
//
// 1 <= nums.length <= 104
// 0 <= nums[i] <= 1000

/**
 * @author ：zhenjie.xuan
 * @date ：Created in 2021/7/28 21:40
 * @description： 45-跳跃游戏，题目如上
 */
public class Solution45 {

    /**
     * 采用的方法类似贪心，每次从最左边开始寻找，找到第一个到达边界len的位置
     * 此时，此位置标记为i，为只需要一步就可以跳到边界的位置，那么记录跳跃次数+1
     * 并且更新边界len = i，再重复上述步骤，直到len <= 0即为从起点一步可以跳跃到边界len
     *
     * @param nums 输入
     * @return 最小跳跃次数
     */
    public int jump(int[] nums) {
        int len = nums.length - 1;
        int sum = 0;
        int i = 0;
        while (len > 0) {
            if (nums[i] + i >= len) {
                sum++;
                len = i;
                i = 0;
                continue;
            }
            i++;
        }
        return sum;
    }
}
